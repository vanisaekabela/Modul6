from tkinter import *
from tkinter import messagebox as mb
import threading
import random
import os.path
from tkinter import *

datUser = 'vani'
datPassword = 'pompom'

class DemoLogin:
    def _init_(self, induk, judul):
        self.induk = induk

        self.induk.title(judul)
        self.induk.protocol("WM_DELETE_WINDOW", self.Tutup)
        self.induk.resizable(False, False)

        self.aturKomponen()

        self.entUser.focus_set()

    def aturKomponen(self):
        frameUtama = Frame(self.induk, bd=10)
        frameUtama.pack(fill=BOTH, expand=YES)

        frData = Frame(frameUtama, bd=5)
        frData.pack(fill=BOTH, expand=YES)

        Label(frData, text='Nama Pengguna:').grid(row=0, column=0, sticky=W)
        self.entUser = Entry(frData)
        self.entUser.grid(row=0, column=1)

        Label(frData, text='Kata Kunci:').grid(row=1, column=0, sticky=W)
        self.entPass = Entry(frData, show='*')
 
        self.entPass.grid(row=1, column=1)
        self.cek = IntVar()

        self.cbShowPass = Checkbutton(frData, text='Lihat Kata Kunci',
 variable=self.cek, command=self.lihatPassword)
        self.cbShowPass.grid(row=2, column=1, sticky=E)

        frTombol = Frame(frameUtama, bd=5)
        frTombol.pack(fill=BOTH, expand=YES)

        self.btnLogin = Button(frTombol, text='Login', command=self.prosesLogin)
        self.btnLogin.pack(side=LEFT, fill=BOTH, expand=YES)

        self.btnBatal = Button(frTombol, text='Batal', command=self.Tutup)
        self.btnBatal.pack(side=LEFT, fill=BOTH, expand=YES)

    def prosesLogin(self, event=None):
     nmUser = self.entUser.get()
     passUser = self.entPass.get()

     if nmUser=='':
        mb.showwarning('Pesan Salah', 'Nama User tidak boleh kosong!', parent = self.induk)
        self.entUser.focus_set()
    
     elif passUser=='':
        mb.showwarning('Pesan Salah', 'Kata Kunci tidak boleh kosong!',
parent=self.induk)
        self.entPass.focus_set()
     
     elif (nmUser==datUser) and (passUser==datPassword):
        mb.showinfo("Login", "Selamat Bermain", parent=self.induk) 
        self.Tutup()
     else:
        mb.showwarning('Pesan Salah', 'Nama Pengguna atau Kata Kunci SALAH!!', parent=self.induk)
        self.Hapus()

    def lihatPassword(self, event=None):
        nilaiCek = self.cek.get()

        if nilaiCek== 1:
         self.entPass['show'] = ''
         
        else:
            self.entPass['show'] = '*'

    def Tutup(self, event=None):
     self.induk.destroy()

    def Hapus(self, event=None):
     self.entUser.delete(0, END)
     self.entPass.delete(0, END)
     self.entUser.focus_set()

if __name__ == '_main_':
 root= Tk()

 app = DemoLogin(root, ":: Demo Login Password ::")

 root.mainloop()


import turtle
import random
 
w = 500
h = 500
food_size = 10
delay = 100
 
offsets = {
    "up": (0, 20),
    "down": (0, -20),
    "left": (-20, 0),
    "right": (20, 0)
}
 
def reset():
    global snake, snake_dir, food_position, pen
    snake = [[0, 0], [0, 20], [0, 40], [0, 60], [0, 80]]
    snake_dir = "up"
    food_position = get_random_food_position()
    food.goto(food_position)
    move_snake()
     
def move_snake():
    global snake_dir
 
    new_head = snake[-1].copy()
    new_head[0] = snake[-1][0] + offsets[snake_dir][0]
    new_head[1] = snake[-1][1] + offsets[snake_dir][1]
 
     
    if new_head in snake[:-1]:
        reset()
    else:
        snake.append(new_head)
 
     
        if not food_collision():
            snake.pop(0)
 
 
        if snake[-1][0] > w / 2:
            snake[-1][0] -= w
        elif snake[-1][0] < - w / 2:
            snake[-1][0] += w
        elif snake[-1][1] > h / 2:
            snake[-1][1] -= h
        elif snake[-1][1] < -h / 2:
            snake[-1][1] += h
 
 
        pen.clearstamps()
 
         
        for segment in snake:
            pen.goto(segment[0], segment[1])
            pen.stamp()
 
         
        screen.update()
 
        turtle.ontimer(move_snake, delay)
 
def food_collision():
    global food_position
    if get_distance(snake[-1], food_position) < 20:
        food_position = get_random_food_position()
        food.goto(food_position)
        return True
    return False
 
def get_random_food_position():
    x = random.randint(- w / 2 + food_size, w / 2 - food_size)
    y = random.randint(- h / 2 + food_size, h / 2 - food_size)
    return (x, y)
 
def get_distance(pos1, pos2):
    x1, y1 = pos1
    x2, y2 = pos2
    distance = ((y2 - y1) ** 2 + (x2 - x1) ** 2) ** 0.5
    return distance
def go_up():
    global snake_dir
    if snake_dir != "down":
        snake_dir = "up"
 
def go_right():
    global snake_dir
    if snake_dir != "left":
        snake_dir = "right"
 
def go_down():
    global snake_dir
    if snake_dir!= "up":
        snake_dir = "down"
 
def go_left():
    global snake_dir
    if snake_dir != "right":
        snake_dir = "left"
 
 
screen = turtle.Screen()
screen.setup(w, h)
screen.title("Snake")
screen.bgcolor("blue")
screen.setup(500, 500)
screen.tracer(0)
 
 
pen = turtle.Turtle("square")
pen.penup()
 
 
food = turtle.Turtle()
food.shape("square")
food.color("yellow")
food.shapesize(food_size / 20)
food.penup()
 
 
screen.listen()
screen.onkey(go_up, "Up")
screen.onkey(go_right, "Right")
screen.onkey(go_down, "Down")
screen.onkey(go_left, "Left")
 
 
reset()
turtle.done()
